import streamlit as st
import os
from dotenv import load_dotenv
import google.generativeai as genai
from langchain_core.output_parsers.json import JsonOutputParser
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI

from claim_searcher import search_claims

load_dotenv()

api_key = os.getenv("GEMINI_API_KEY")

genai.configure(api_key=api_key)
model = genai.GenerativeModel("gemini-2.0-flash-lite")
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash-lite", api_key=api_key)

st.set_page_config(layout="wide")

check1, check2 = st.columns([0.005, 0.04], gap="small")
with check1:
    fact_check = st.checkbox("Faktakontroll")
with check2:
    tone_check = st.checkbox("Tonalitet")



col1, col2 = st.columns([2, 1])

with col1:
    with st.container(border=True):
        if "doc_text" in st.session_state:
            st.text(st.session_state["doc_text"])


with col2:
    text = st.session_state["doc_text"]
    feedback_text = ""

    if fact_check:
        st.markdown("### **Faktakontroll**")
        claim_extr_prompt = PromptTemplate.from_template("""
        Du 칛r en redakt칬rsassistent som arbetar med faktagranskning.

        G친 igenom f칬ljande text och extrahera endast de meningar eller stycken som inneh친ller sakliga p친st친enden - allts친 fakta som skulle kunna kontrolleras genom en internets칬kning.

        G칬r f칬ljande:
        1. Identifiera varje faktap친st친ende och kopiera det ordagrant.
        2. Uteslut allt som 칛r subjektivt, spekulativt, inneh친ller v칛rderingar, eller inte g친r att verifiera via internet.
        3. F칬r varje p친st친ende, formulera en fokuserad s칬kfr친ga (till exempel en Google-s칬kning) som kan anv칛ndas f칬r att kontrollera sanningshalten.
        4. Lista resultatet i detta format:

        [
        {{
            "p친st친ende": "WWF bildades 1961 i Schweiz.",
            "s칬kfr친ga": "WWF bildades 1961 Schweiz"
        }}
        ]

        Text att analysera:
        \"\"\"
        {input_text}
        \"\"\"
        """)

        extract_sources_chain = claim_extr_prompt | llm | JsonOutputParser()
        response = extract_sources_chain.invoke({"input_text": text})

        result_list = search_claims(response)

        for claim_with_source in result_list:
            claim = claim_with_source["claim"]

            st.markdown(f"### P친st친ende:\n{claim}")
            feedback_text += f"P친st친ende:\n{claim}\n"

            search_results = claim_with_source["results"]

            evidence = ""

            st.markdown("### Relaterade k칛llor:")
            for source in search_results:
                title = source["title"]
                url = source["url"]
                content = source["content"]
                evidence += content

                # Display title with a hyperlink to the URL
                st.markdown(f"[游댕 {title}]({url})", unsafe_allow_html=True)

                st.markdown(content)

                feedback_text += f"K칛llor: {title}\n{url}\n{content}\n\n"

            feedback_text += "\n"

            fact_check_prompt = PromptTemplate.from_template(
                """H칛r 칛r ett p친st친ende som ska kontrolleras: {claim}. 
                St칛mmer p친st친endet utifr친n den h칛r informationen (fr친n s칬kresultat) som ska anv칛ndas som underlag: {evidence}? 
                
                Din uppgift 칛r att bed칬ma om p친st친endet:
                - **St칬ds av k칛llor***
                - **Mots칛gs av k칛llor**
                - **Os칛kert, kan beh칬vas unders칬kas n칛rmare** (t.ex. om k칛llorna 칛r motstridiga eller inte direkt st칬djer p친st친endet)
                
                Ange din slutsats med ett av dessa tre alternativ, f칬ljt av en kort motivering p친 h칬gst en mening. Exempel:

                St칬ds av k칛llor  \n
                Motivering: P친st친endet bekr칛ftas direkt av en eller fler k칛llor."""
            )

            extract_sources_chain = fact_check_prompt | llm | StrOutputParser()
            response = extract_sources_chain.invoke(
                {"claim": claim, "evidence": evidence}
            )
            st.markdown(f"### Slutsats:\n{response}")
            feedback_text += f"AI-slutsats:\n{response}"

    if tone_check:
        st.markdown("### **Tonalitetskontroll**")
        prompt = f"""Jag vill att du hj칛lper mig att justera tonaliteten i en text. M친let 칛r att g칬ra texten mer neutral, objektiv och saklig, utan att 칛ndra dess inneb칬rd eller fakta. F칬lj de h칛r fyra stegen:

        1.Identifiera formuleringar som 칛r subjektiva eller v칛rderande. Leta efter ord eller uttryck som inneh친ller 친sikter, k칛nslor, 칬verdrifter eller personliga v칛rderingar.
        2.F칬rklara kort varf칬r varje uttryck du identifierar 칛r subjektivt.
        3.F칬resl친 en omskrivning som g칬r uttrycket mer neutralt och objektivt. Inneh친llet och betydelsen ska beh친llas.
        4.Presentera varje fall i exakt detta format, med en radbrytning mellan varje nytt exempel:

        **Original**: [originalformulering] \n
        **Kommentar**: [kort f칬rklaring till varf칬r det 칛r subjektivt] \n
        **Omskrivning**: [neutral version] \n\n
        
                    
        H칛r 칛r texten: {text}"""

        response = model.generate_content(prompt)
        st.markdown(response.text)
        feedback_text += "### Tonalitetskontroll\n" + response.text + "\n\n"

    # Downloading the result file
    st.download_button("Ladda ned feedback", feedback_text, file_name="feedback.txt")
