import streamlit as st
import os
from dotenv import load_dotenv
import re
import google.generativeai as genai
from langchain_core.output_parsers.json import JsonOutputParser
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI

from claim_searcher import search_claims

load_dotenv()

api_key = os.getenv("GEMINI_API_KEY")

genai.configure(api_key=api_key)
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash-lite", api_key=api_key)


st.set_page_config(layout="wide")

st.markdown(
    """
    <style>
        .block-container {
            padding-top: 3rem;
        }
    </style>
""",
    unsafe_allow_html=True,
)

# Back button
top_col1, _, _ = st.columns([0.1, 0.8, 0.1])
with top_col1:
    if st.button("Back"):
        st.switch_page("home_page.py")


st.markdown(
    '<h1 style="text-align: center;"> Textgranskare </h1>', unsafe_allow_html=True
)


col1, col2 = st.columns([0.05, 0.04], gap="small")
with col1:
    selected_option = st.radio(
        "V칛lj granskningstyp",
        ["Faktakontroll", "Tonalitet"],
        horizontal=True,
        label_visibility="collapsed",
    )


@st.cache_data(show_spinner="S칬ker och h칛mtar relaterade k칛llor...")
def get_claim_search_output():
    claim_extr_prompt = PromptTemplate.from_template("""
            Du 칛r en redakt칬rsassistent som arbetar med faktagranskning.

            G친 igenom f칬ljande text och extrahera endast de meningar eller stycken som inneh친ller sakliga p친st친enden - allts친 fakta som skulle kunna kontrolleras genom en internets칬kning.

            G칬r f칬ljande:
            1. Identifiera varje faktap친st친ende och kopiera det ordagrant.
            2. Uteslut allt som 칛r subjektivt, spekulativt, inneh친ller v칛rderingar, eller inte g친r att verifiera via internet.
            3. F칬r varje p친st친ende, formulera en fokuserad s칬kfr친ga (till exempel en Google-s칬kning) som kan anv칛ndas f칬r att kontrollera sanningshalten.
            4. Lista resultatet i detta format:

            [
            {{
                "p친st친ende": "WWF bildades 1961 i Schweiz.",
                "s칬kfr친ga": "WWF bildades 1961 Schweiz"
            }}
            ]

            Text att analysera:
            \"\"\"
            {input_text}
            \"\"\"
            """)
    extract_sources_chain = claim_extr_prompt | llm | JsonOutputParser()
    response = extract_sources_chain.invoke({"input_text": text})

    result_list = search_claims(response)

    return result_list


@st.cache_data(show_spinner="Genererar tonalitetsfeedback...")
def get_tonality_feedback(text):
    prompt = f"""Jag vill att du hj칛lper mig att justera tonaliteten i en text. M친let 칛r att f친 texten att l친ta mer trov칛rdig och naturlig, utan att 칛ndra dess inneb칬rd eller fakta. F칬lj de h칛r fyra stegen:

    1.Identifiera formuleringar som beh칬ver f칬rtydligas, samt formuleringar som har ett d친ligt flyt eller en f칬r slapp ton. Leta efter ord eller uttryck som inneh친ller 칬verdrifter eller personliga v칛rderingar.
    2.F칬rklara kort varf칬r varje uttryck du identifierar 칛r otydligt eller har d친ligt flyt.
    3.F칬resl친 en omskrivning som g칬r uttrycket mer sammanh칛ngande eller trov칛rdigt. Inneh친llet och betydelsen ska beh친llas.
    4.Presentera varje fall i exakt detta format:

    **Original**: [originalformulering] \n
    **Kommentar**: [kort f칬rklaring till varf칬r det 칛r subjektivt] \n
    **Omskrivning**: [neutral version] \n
        
                    
    H칛r 칛r texten: {text}"""

    response = llm.invoke(prompt)
    return response.content


col1, col2 = st.columns([2, 1])

feedback_text = ""

with col1:
    with st.container(border=True):
        if "doc_text" in st.session_state:
            st.markdown(st.session_state["doc_text"])


with col2:
    text = st.session_state["doc_text"]

    # FAKTAKOLL
    if selected_option == "Faktakontroll":
        st.download_button(
            "Ladda ned feedback", feedback_text, file_name="feedback.txt"
        )
        st.markdown("### **Faktakontroll**")

        with st.spinner("S칬ker och h칛mtar relaterade k칛llor..."):
            claim_extr_prompt = PromptTemplate.from_template("""
            Du 칛r en redakt칬rsassistent som arbetar med faktagranskning.

            G친 igenom f칬ljande text och extrahera endast de meningar eller stycken som inneh친ller sakliga p친st친enden - allts친 fakta som skulle kunna kontrolleras genom en internets칬kning.

            G칬r f칬ljande:
            1. Identifiera varje faktap친st친ende och kopiera det ordagrant.
            2. Uteslut allt som 칛r subjektivt, spekulativt, inneh친ller v칛rderingar, eller inte g친r att verifiera via internet.
            3. F칬r varje p친st친ende, formulera en fokuserad s칬kfr친ga (till exempel en Google-s칬kning) som kan anv칛ndas f칬r att kontrollera sanningshalten.
            4. Lista resultatet i detta format:

            [
            {{
                "p친st친ende": "WWF bildades 1961 i Schweiz.",
                "s칬kfr친ga": "WWF bildades 1961 Schweiz"
            }}
            ]

            Text att analysera:
            \"\"\"
            {input_text}
            \"\"\"
            """)

            extract_sources_chain = claim_extr_prompt | llm | JsonOutputParser()
            response = extract_sources_chain.invoke({"input_text": text})

            result_list = search_claims(response)

        for claim_with_source in result_list:
            claim = claim_with_source["claim"]

            st.markdown(f"### P친st친ende:\n{claim}")
            feedback_text += f"P친st친ende:\n{claim}\n"

            search_results = claim_with_source["results"]

            evidence = ""

            summarize_prompt = PromptTemplate.from_template(
                """Plocka ut 2-3 hela meningar fr친n denna text: {content}. 
                Utg친 ifr친n de delar av texten som aktivt svarar p친 detta p친st친ende: {claim}, s친 andra orelaterade delar av texten b칬r ignoreras.
                Om du hittar en exakt eller v칛ldigt lik formulering som p친st친endet b칬r denna tas med.
                Om direkta siffror n칛mns s친 b칬r du f칬rs칬ka hitta de exakta siffrorna i texten som h칬r ihop med formuleringen i p친st친endet.
                Generera inte nytt inneh친ll, utan plocka ut de sammanh칛ngande meningarna i texten som 칬verensst칛mmer mest med 칛mnet. 
                Skapa ingen punktlista, utan skriv bara meningarna efter varandra, utan citattecken. Ta inte med n친gon ytterligare f칬rklaring utan skriv bara ut meningarna som de 칛r.
                Om du inte kan extrahera meningar, l칛mna d친 svaret som en tom str칛ng, utan kommentar.
                """
            )

            st.markdown("### Relaterade k칛llor:")
            for source in search_results:
                title = source["title"]
                url = source["url"]
                content = source["content"]

                # Display title with a hyperlink to the URL
                st.markdown(f"[游댕 {title}]({url})", unsafe_allow_html=True)

                create_content_chain = summarize_prompt | llm | StrOutputParser()

                # new_content = create_content_chain.invoke(        # invoke
                # {"content": content, "claim": claim}
                # )

                response_stream = create_content_chain.stream(
                    {"content": content, "claim": claim}
                )

                # evidence += new_content

                output = st.empty()  # Create an empty placeholder
                tokens = ""

                for chunk in response_stream:
                    tokens += chunk
                    output.markdown(tokens)

                new_content = tokens
                evidence += new_content

                # st.markdown(new_content)

                feedback_text += f"K칛llor: {title}\n{url}\n{content}\n\n"

            feedback_text += "\n"

            fact_check_prompt = PromptTemplate.from_template(
                """H칛r 칛r ett p친st친ende som ska kontrolleras: {claim}. 
                St칛mmer p친st친endet utifr친n den h칛r informationen (fr친n s칬kresultat) som ska anv칛ndas som underlag: {evidence}? 
                
                Din uppgift 칛r att bed칬ma om p친st친endet:
                - **P친st친endet st칬ds av k칛llor***
                - **P친st친endet mots칛gs av k칛llor**
                - **Os칛kert, kan beh칬vas unders칬kas n칛rmare** (t.ex. om k칛llorna 칛r motstridiga eller inte direkt st칬djer p친st친endet)
                
                Ange din slutsats med ett av dessa tre alternativ, f칬ljt av en kort motivering p친 h칬gst en mening. Exempel:

                P친st친endet st칬ds av k칛llor  \n
                Motivering: P친st친endet bekr칛ftas direkt av en eller fler k칛llor."""
            )

            extract_sources_chain = fact_check_prompt | llm | StrOutputParser()
            response = extract_sources_chain.invoke(
                {"claim": claim, "evidence": evidence}
            )
            st.markdown(f"### Slutsats:\n{response}")
            feedback_text += f"AI-slutsats:\n{response}"

    # TONALITETSKOLL
    elif selected_option == "Tonalitet":
        st.download_button(
            "Ladda ned feedback", feedback_text, file_name="feedback.txt"
        )
        st.markdown("### **Tonalitetskontroll**")

        full_text = get_tonality_feedback(text)

        feedback_text += "### Tonalitetskontroll\n" + full_text + "\n\n"

        if "tonality_blocks" not in st.session_state:
            raw_blocks = re.split(r"\n(?=\*\*Original\*\*:)", full_text.strip())
            st.session_state.tonality_blocks = raw_blocks
            st.session_state.show_full_text = False

        block_limit = 4

        def show_more():
            st.session_state.show_full_text = True

        def show_less():
            st.session_state.show_full_text = False

        # Display either preview or full output
        if st.session_state.show_full_text:
            for block in st.session_state.tonality_blocks:
                st.markdown(block.strip())
                st.markdown("---")
            st.button("Visa mindre", on_click=show_less)
        else:
            for block in st.session_state.tonality_blocks[:block_limit]:
                st.markdown(block.strip())
                st.markdown("---")
            st.button("Visa mer", on_click=show_more)
